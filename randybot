import random
import time
from telebot import types
import telebot

bot = telebot.TeleBot('5707350450:AAFUKPpi8HG-Gz0pNfx9Cflw2MZ-2E35e8c')

@bot.message_handler(commands=['start', 'help'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    buttonA = types.InlineKeyboardButton('–ú–æ–Ω–µ—Ç–∞ü™ô', callback_data='a')
    buttonB = types.InlineKeyboardButton('–ö—É–±üé≤', callback_data='b')
    buttonC = types.InlineKeyboardButton('–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Äüé±', callback_data='mb')
    buttonD = types.InlineKeyboardButton('–°–ª–æ—Ç—ã', callback_data='slots')
    markup.row(buttonA, buttonB)
    markup.row(buttonC, buttonD)
    bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', parse_mode='html', reply_markup=markup, )


@bot.message_handler(content_types=['text'])
def text(message):
    if message.text == '–ü—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, '<b>–ü—Ä–∏–≤–µ—Ç!</b>', parse_mode='html' )

    else:
        bot.send_message(message.chat.id, '<b>–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–ø–∏—à–∏ /help </b>', parse_mode='html')


@bot.callback_query_handler(func=lambda call: True)
def handle(call):
     if call.data == 'a' or call.data == 'c':
        wa = types.InlineKeyboardMarkup()
        buttonA = types.InlineKeyboardButton('...', callback_data='null')

        wa.row(buttonA)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='ü™ô–ë—Ä–æ—Å–∞—é', reply_markup=wa)
        time.sleep(0.1)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='ü™ô–ë—Ä–æ—Å–∞—é.', reply_markup=wa)
        time.sleep(0.1)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='ü™ô–ë—Ä–æ—Å–∞—é..', reply_markup=wa)
        time.sleep(0.1)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='ü™ô–ë—Ä–æ—Å–∞—é...', reply_markup=wa)


        num = random.randint(1, 2)

        time.sleep(0.3)

        if num == 1:
             markup = types.InlineKeyboardMarkup()
             buttonA = types.InlineKeyboardButton('–ï—â–µ —Ä–∞–∑...', callback_data='c')
             buttonB = types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu')
             markup.row(buttonB, buttonA)
             bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='ü¶Ö–û—Ä–µ–ª!', reply_markup=markup)

             #bot.send_message(call.message.chat.id, '–í—ã–ø–∞–ª <b>–û—Ä–µ–ª!</b>', parse_mode='html', reply_markup=markup)
        elif num == 2:
            markup = types.InlineKeyboardMarkup()
            buttonA = types.InlineKeyboardButton('–ï—â–µ —Ä–∞–∑...', callback_data='c')
            buttonB = types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu')
            markup.row(buttonB, buttonA)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='ü™ô–†–µ—à–∫–∞!', reply_markup=markup)

            #bot.send_message(call.message.chat.id, '–í—ã–ø–∞–ª–æ <b>–†–µ—à–∫–∞!</b>', parse_mode='html', reply_markup=markup)
     elif call.data == 'b' or call.data == 'd':
        markup = types.InlineKeyboardMarkup()
        buttonA = types.InlineKeyboardButton('–ï—â–µ —Ä–∞–∑...', callback_data='d')
        buttonB = types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu')
        markup.row(buttonB, buttonA)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üé≤–ë—Ä–æ—Å–∞—é')
        time.sleep(0.1)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üé≤–ë—Ä–æ—Å–∞—é.')
        time.sleep(0.1)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üé≤–ë—Ä–æ—Å–∞—é..')
        time.sleep(0.1)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üé≤–ë—Ä–æ—Å–∞—é...')

        time.sleep(0.3)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='<b>–í—ã–ø–∞–ª–æ:</b> ' + str(random.randint(1, 6)), parse_mode='html', reply_markup=markup)

     elif call.data == 'menu':

        markup = types.InlineKeyboardMarkup()
        buttonA = types.InlineKeyboardButton('–ú–æ–Ω–µ—Ç–∞ü™ô', callback_data='a')
        buttonB = types.InlineKeyboardButton('–ö—É–±üé≤', callback_data='b')
        buttonC = types.InlineKeyboardButton('–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Äüé±', callback_data='mb')
        buttonD = types.InlineKeyboardButton('–°–ª–æ—Ç—ãüé∞', callback_data='slots')
        markup.row(buttonA, buttonB)
        markup.row(buttonC, buttonD)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=markup)

     elif call.data == 'mb':
         mbinfo = types.InlineKeyboardMarkup()
         buttonA = types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu')
         buttonB = types.InlineKeyboardButton('–¢—Ä—è—Å—Ç–∏', callback_data='shake')
         mbinfo.row(buttonA, buttonB)
         bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='<b>–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä</b> - —ç—Ç–æ —à–∞—Ä, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ (–¥–∞, –Ω–µ—Ç –∏ —Ç.–¥.). –î–ª—è –∏–≥—Ä—ã —Å–∫–∞–∂–∏ –≤—Å–ª—É—Ö –∏–ª–∏ –ø—Ä–æ —Å–µ–±—è –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏ –Ω–∞ "–¢—Ä—è—Å—Ç–∏"üëá', parse_mode='html', reply_markup=mbinfo)

     elif call.data == 'shake':
         shake = types.InlineKeyboardMarkup()
         buttonA = types.InlineKeyboardButton('...', callback_data='null')
         shake.row(buttonA)
         bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–¢—Ä—è—Å—É', reply_markup=shake)
         time.sleep(0.1)
         bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–¢—Ä—è—Å—É.', reply_markup=shake)
         time.sleep(0.1)
         bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–¢—Ä—è—Å—É..', reply_markup=shake)
         time.sleep(0.1)
         bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–¢—Ä—è—Å—É...', reply_markup=shake)
         time.sleep(0.3)

         markup = types.InlineKeyboardMarkup()
         buttonA = types.InlineKeyboardButton('–¢—Ä—è—Å—Ç–∏', callback_data='shake')
         buttonB = types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu')
         markup.row(buttonB, buttonA)

         answer = random.randint(1, 9)
         if answer == 1:
             bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '–®–∞—Ä –æ—Ç–≤–µ—Ç–∏–ª: <b>–î–∞</b>', parse_mode='html', reply_markup=markup)

         elif answer == 2:
             bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–®–∞—Ä –æ—Ç–≤–µ—Ç–∏–ª: <b>–î—É–º–∞—é –¥–∞</b>', parse_mode='html', reply_markup=markup)
         elif answer == 3:
             bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–®–∞—Ä –æ—Ç–≤–µ—Ç–∏–ª: <b>100% –î–∞</b>', parse_mode='html', reply_markup=markup)
         elif answer == 4:
             bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–®–∞—Ä –æ—Ç–≤–µ—Ç–∏–ª: <b>–ù–µ—Ç</b>', parse_mode='html', reply_markup=markup)
         elif answer == 5:
             bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–®–∞—Ä –æ—Ç–≤–µ—Ç–∏–ª: <b>–¢–æ—á–Ω–æ –Ω–µ—Ç</b>', parse_mode='html', reply_markup=markup)
         elif answer == 6:
             bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–®–∞—Ä –æ—Ç–≤–µ—Ç–∏–ª: <b>–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç</b>', parse_mode='html', reply_markup=markup)
         elif answer == 7:
             bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–®–∞—Ä –æ—Ç–≤–µ—Ç–∏–ª: <b>–ù–µ —Ñ–∞–∫—Ç</b>', parse_mode='html', reply_markup=markup)
         elif answer == 8:
             bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–®–∞—Ä –æ—Ç–≤–µ—Ç–∏–ª: <b>–ù–µ–∑–Ω–∞—é</b>', parse_mode='html', reply_markup=markup)
         elif answer == 9:
             bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–®–∞—Ä –æ—Ç–≤–µ—Ç–∏–ª: <b>–°–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>', parse_mode='html', reply_markup=markup)


     elif call.data == 'slots':
         num1 = random.randint(1, 3)
         num2 = random.randint(1, 3)
         num3 = random.randint(1, 3)
#üçãüé±üçÄüçíüíµ
         if num1 == 1:
             f = "üçã"
         elif num1 == 2:
             f = "üçÄ"
         elif num1 == 3:
             f = "üçí"


         if num2 == 1:
             f2 = "üçã"
         elif num2 == 2:
             f2 = "üçÄ"
         elif num2 == 3:
             f2 = "üçí"


         if num3 == 1:
             f3 = "üçã"
         elif num3 == 2:
             f3 = "üçÄ"
         elif num3 == 3:
             f3 = "üçí"


         markup = types.InlineKeyboardMarkup()
         buttonA = types.InlineKeyboardButton('–ö—Ä—É—Ç–∏—Ç—å –µ—â–µ...', callback_data='slots')
         buttonB = types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu')
         markup.row(buttonB)
         markup.row(buttonA)

         wait = types.InlineKeyboardMarkup()

         buttonB = types.InlineKeyboardButton('...', callback_data='null')
         wait.row(buttonB)


         bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f, parse_mode='html', reply_markup=wait)
         time.sleep(1)
         bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f + f2, parse_mode='html', reply_markup=wait)
         time.sleep(1)
         bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f + f2 + f3, parse_mode='html', reply_markup=markup)

bot.polling(none_stop=True)
